{"version":3,"sources":["components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","components/Expenses/ExpensesFilter.js","components/Expenses/ExpenseDate.js","components/UI/Card.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expense.js","App.js","index.js"],"names":["ExpenseForm","props","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","event","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","className","type","value","onChange","target","min","step","max","onClick","stateCloseForm","NewExpense","isVisible","setVisible","enteredExpenseData","id","Math","random","toString","onAddExpense","stateData","ExpensesFilter","selected","console","log","onSaveDatayear","ExpenseDate","month","toLocaleString","day","year","getFullYear","Card","classes","children","ExpenseItem","ExpensesList","items","length","map","expense","ChartBar","barFillHeight","maxValue","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","ExpensesChart","chartDataPoints","expenses","getMonth","Expense","filteredYear","setFilteredYear","filteredExpenses","filter","data","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8d6d23a4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  // const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: '',\r\n  //     enteredAmout: '',\r\n  //     enteredDate: ''\r\n  // });\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n    // truyền một object mới, những gì người dùng đã nhập\r\n    // dùng spread operator sau đó ghi đè lên dữ liệu cũ để khi truyền dữ liệu là 1 obj mới sẽ không bị mất dữ liệu cũ\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredTitle: event.target.value\r\n    // })\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredAmout: event.target.value\r\n    // })\r\n\r\n    // setUserInput((prevState) => {\r\n    //     return { ...prevState, enteredAmout: event.target.value }\r\n    // })\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput({\r\n    //     ...userInput,\r\n    //     enteredDate: event.target.value\r\n    // })\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    // truyền tham số để đẩy dữ liệu lên NewExpense component, tham số ở đây là dữ liệu expenseData\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  const closeForm = () => {\r\n    props.stateCloseForm(false);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            value={enteredAmount}\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            value={enteredDate}\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={closeForm}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n  const [isVisible, setVisible] = useState(false);\r\n\r\n  // tham số enteredExpenseData là tham số mặc định, chính là dữ liệu ở bên ExpenseForm components\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n    setVisible(false);\r\n  };\r\n\r\n  const openForm = () => {\r\n    setVisible(true);\r\n  };\r\n  const closeForm = (stateData) => {\r\n    setVisible(stateData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isVisible && <button onClick={openForm}>Add New Expense</button>}\r\n      {isVisible && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          stateCloseForm={closeForm}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import React from \"react\";\r\n\r\nimport \"./ExpensesFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  const changeSelectHandler = (event) => {\r\n    console.log(event.target.value);\r\n    props.onSaveDatayear(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={changeSelectHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import React from \"react\";\r\n\r\nimport \"./ExpenseDate.css\";\r\n\r\nfunction ExpenseDate(props) {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseDate;\r\n","import React from 'react'\r\n\r\nimport './Card.css'\r\n\r\nfunction Card(props) {\r\n    const classes = 'card ' + props.className;\r\n\r\n    return <div className={classes}>{props.children}</div>\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nimport \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\n\r\nfunction ExpenseItem(props) {\r\n  // const expenseDate = new Date(2022, 2, 28);\r\n  // const expenseTitle = 'Gundam';\r\n  // const expenseAmount = 400.00;\r\n\r\n  // useState nhận hai tham số, tham số đầu là giá trị ban đầu, tham số thứ 2 là một function để update giá trị ban đầu\r\n  // khi có giá trị thay đổi, React sẽ gọi lại component một lần nữa để update giá trị mới.\r\n  // note: ý nghĩa của việc dùng [], đây là array destructuring, nó có nghĩa là bạn đang tạo\r\n  // hai biến title và setState\r\n  // const [title, setState] = useState(props.title);\r\n\r\n  // const clickHandler = () => {\r\n  //     setState('New Value');\r\n  //     console.log('Clicked!');\r\n  // }\r\n\r\n  return (\r\n    <li>\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n        {/* <button onClick={clickHandler}>Change Title</button> */}\r\n      </Card>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport \"./ExpensesList.css\";\r\n\r\nconst ExpensesList = (props) => {\r\n  if (props.items.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">No data in here!</h2>;\r\n  }\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.items.map((expense) => (\r\n        <ExpenseItem\r\n          key={expense.id}\r\n          title={expense.title}\r\n          amount={expense.amount}\r\n          date={expense.date}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport \"./ChartBar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import React from \"react\";\r\n\r\nimport ChartBar from \"./ChartBar\";\r\nimport \"./Chart.css\";\r\n\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"../Chart/Chart\";\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n\r\n  // chạy vòng for trong mảng, vòng for này có nhiệm vụ update value trong mảng chartDataPoints\r\n  for (const expense of props.expenses) {\r\n    // trả về 1 số, ví dụ tháng 1 sẽ trả về 0, tháng 2 là 1, ...\r\n    const expenseMonth = expense.date.getMonth(); \r\n    // dùng expenseMonth như 1 index để update value trong mảng chartDataPoints\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n\r\n  // sau khi chạy vòng for và update xong thì truyền dữ liệu xuống component Chart\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./Expense.css\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport Card from \"../UI/Card\";\r\n\r\nconst Expense = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2022\");\r\n\r\n  const saveDataYearHandler = (data) => {\r\n    console.log(\"du lieu moi: \", data);\r\n    setFilteredYear(data);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    // console.log('day la expense: ',expense)\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onSaveDatayear={saveDataYearHandler}\r\n        />\r\n        {/* {\r\n                    filteredExpenses.length === 0 ? (\r\n                        <p>Không có gì cả.</p>\r\n                    ) : (\r\n                        filteredExpenses.map((expense) => (\r\n                            <ExpenseItem\r\n                                key={expense.id}\r\n                                title={expense.title}\r\n                                amount={expense.amount}\r\n                                date={expense.date} />\r\n                        ))\r\n                    )\r\n                } */}\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        <ExpensesList items={filteredExpenses} />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expense;\r\n","import React, { useState } from \"react\";\n\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport Expense from \"./components//Expenses/Expense\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nfunction App() {\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n\n  const addExpenseHandler = (expense) => {\n    // function đặc biệt của react, prevExpenses sẽ lấy state mới nhất của expenses\n    // trong trường hợp này, trạng thái ban đầu của expenses là mảng DUMMY_EXPENSES ban đầu.\n    setExpenses((prevExpenses) => {\n      console.log(prevExpenses);\n      return [expense, ...prevExpenses];\n    });\n    console.log(\"Dữ liệu truyền đến: \", expense);\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expense items={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}